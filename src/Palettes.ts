import * as colz from 'colz'
import Jimp from 'jimp'
import { HueDetails } from './HueDetails'
import { simplify360Increments } from './mappers'

export class Palettes {
    private BOX:number = 90
    private PAD:number = 10
    private TOTAL:number = 100

    private widthFromBoxCount = boxCount => (this.TOTAL * boxCount) + this.PAD
    private heightFromBoxCount = boxCount => (this.TOTAL * boxCount) + this.PAD

    private realX = (x,xBox)=> (xBox * this.TOTAL) + x + this.PAD
    private realY = (y,yBox)=> (yBox * this.TOTAL) + y + this.PAD


    writeHues(namePrefix:string,huesSorted:Array<HueDetails>) {
        // the allowed hue values that are generated by the simplify360 routine
        const hues = simplify360Increments()
        const outImage = new Jimp(this.widthFromBoxCount(hues.length),this.heightFromBoxCount(11))

        let mapHueToCol = []
        hues.forEach((hue,idx)=>{
            const c = new colz.Color(0,0,0)
            c.setHue(hue)
            c.setLum(50)
            c.setSat(100)
            this.boxAt(idx,10,outImage,c)
            mapHueToCol[hue] = idx
        })

        const scaleDivisor = Math.round( huesSorted[0].pixels / 10 )
        huesSorted.filter(hd=>hd.pixels!=0).forEach(hueDetails=>{
            const c = new colz.Color(0,0,0)
            c.setHue(hueDetails.hue)
            c.setLum(50)
            c.setSat(100)
            const boxCount = Math.round(hueDetails.pixels / scaleDivisor)
            for(let boxNumber=0; boxNumber<boxCount; boxNumber++) {
                this.boxAt(mapHueToCol[hueDetails.hue],9-boxNumber,outImage,c)
            }
        })

        outImage.write(`${namePrefix}.palette.png`)
    }

    boxAt(boxX:number,boxY:number,jimpImage:Jimp,c:any) {
        const imgWidth = jimpImage.getWidth()
        for(let x = 0; x < this.BOX; x++) {
            for(let y=0; y< this.BOX; y++) {
                const realX = this.realX(x,boxX)
                const realY = this.realY(y,boxY)
                const idx = ((realY * imgWidth) + realX ) * 4
                jimpImage.bitmap.data[idx  ] = c.r
                jimpImage.bitmap.data[idx+1] = c.g
                jimpImage.bitmap.data[idx+2] = c.b
                jimpImage.bitmap.data[idx+3] = 255 
            }
        }
        
    }

    /*
    writePalette(inpFileSpec:string) {
        this.hueSorted.forEach((hue,idx)=>{
            this.writePaletteForHue(inpFileSpec,hue,idx)
        })
    }

    writePaletteForHue(inpFileSpec:string,hue:HueDetails,idx:number) {
        const DIM = 90
        const PAD = 10
        const TOTAL = 100
        const IMG_WIDE = (TOTAL * 11) + PAD
        const IMG_HIGH = (TOTAL * 10) + PAD
        let image = new Jimp(IMG_WIDE,IMG_HIGH)

        // Main hue
        let c = new colz.Color(hue.r,hue.g,hue.b)
        c.setLum(50)
        c.setSat(50)
        for(let x=PAD; x<TOTAL; x++) {
            for(let y=PAD; y<TOTAL; y++) {
                const i = ((y * IMG_WIDE) + x) * 4
                image.bitmap.data[i+0] = c.r
                image.bitmap.data[i+1] = c.g
                image.bitmap.data[i+2] = c.b
                image.bitmap.data[i+3] = 255
            }
        }

        for(let satBand=5; satBand<=95; satBand+=10) {
            for(let lumBand=5; lumBand<=95; lumBand+=10) { 
                const key = this.makeKey(hue.hue,lumBand,satBand)
                if(key in this.hueDetail) {
                    const c = new colz.Color(this.hueDetail[key].r,this.hueDetail[key].g,this.hueDetail[key].b)
                    for(let x=0; x<DIM; x++) {
                        for(let y=0; y<DIM; y++) {
                            let satY = Math.floor(satBand / 10)
                            let lumX = Math.floor(lumBand / 10) + 1
                            let realY = x + (satY * TOTAL) + PAD
                            let realX = y + (lumX * TOTAL) + PAD
                            const i = ((realY * IMG_WIDE) + realX) * 4
                            image.bitmap.data[i+0] = c.r
                            image.bitmap.data[i+1] = c.g
                            image.bitmap.data[i+2] = c.b
                            image.bitmap.data[i+3] = 255
                        }
                    }
                }
            }
        }


        const name = `${('00'+idx).slice(-2)}`
        console.log("Writing palette",idx)
        image.writeAsync(`${inpFileSpec}.ZZ-PALETTE-${name}.png`)
    }
    */
}